/************************************/
*                                    * 
*    README for CS444 homework 2     *
*                                    *
*      Author: Zhuoming Huang        *
*          Date: 2021/11/07          *
*                                    *
/************************************/

*** List of work

01. in io.c, rename write/read/control to syswrite/sysread/syscontrol
02. in startup.c, replace main() with init_kernel()
03. in tsyscall.h, define syscall numbers
04. in tunistd.h, create prototypes for exit, read, write, control
05. in tunix.c, define init_kernel(), syscallc(), sysexit()
06. in startup0.s, add a shutdown or exit label to int $3
07. in crt0.s, define an asm ustart function, modified from startup0.s
08. in sysentry.s, define an asm syscall function to call syscallc()
09. in ulib.s, define asm functions for write, read, and exit
10. in test1.c, create a test program similar to testio.c, replace io_public.h with tsystm.h
11. check function names in C and asm, with/without underscore '_'
12. remove definition of set_trap_gate() in tunix.c to avoid multiple definition error, it is provided in cpu.c



*** List of files

i) typescript files
- test1_mod-zmumbcs.script: typerscript of running test1.lnx with debug_log on tutor VM
- remgdb-test1_mod-zmumbcs.script: typerscript of running remote gdb on tutor-vserver VM to debug test1.lnx 

ii) shared files
- tty_public.h: device numbers
- tsyscall.h: syscall numbers

iii) kernel files
- ioconf.h: io header for device structure
- tty.h: io header for tty structure, ttyinit/read/write/control
- tsystm.h: syscall dispatch, kernel function prototypes for ioinit/sysread/syswrite/syscontrol
- startup.c: call clr_bss(), init_devio(), init_kernel()
- tunix.c: definitions of ini_kernel(), syscallc(), sysexit() routines
(tunix_bak.c: backup for tunix.c with set_trap_gate() defined)
- startup0.s: sets up stack, calls into startup.c
- sysentry.s: trap handler's assembler envelope routine syscall for the trap resulting from a system call
- io.c: ioinit, and renamed sysread, syswrite, syscontrol
- ioconf.c: define a device struction devtab
- tty.c: definitions of ttyinit/ttyread/ttywrite/ttycontrol/interrupt handler routines 

iv) user-level files
- tunistd.h: user-mode system call prototypes, exit/read/write/control
- ulib.s: library set-ups for syscalls: write, read, exit
- crt0.s: user-level "C startup module" sets up stack, calls main, does exit syscall. Entry point ustart.
test1.c: has main(), replaced io_public.h with tsystm.h




